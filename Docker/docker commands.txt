# Check docker version, also tells if the docker server and docker client is running.
docker version


# Tells the version of docker.
docker --version


# Runs a container.
docker container run <IMAGE_NAME>
docker run <IMAGE_NAME>
- docker container run ubuntu


# Pulls an image from docker hub.
docker pull <IMAGE_NAME>
docker image pull <IMAGE_NAME>


# List all docker images
docker images
docker image ls


# List docker containers/processes which are running.
docker ps


# List all docker containers/processes which were started or exited.
# "-a" flag is used for all
docker ps -a


# List all docker containers.
docker container ls --all


# Run docker image in interactive mode.
# "-i" flag is used for interactive
# "-t" flag is used for tty
docker container run -it <IMAGE_NAME>
docker run -it <IMAGE_NAME>


# Start docker image in interactive mode (same as above). Conatiner IDs can be seen using `docker ps -a` command.
docker start -i <CONTAINER_ID>
- docker start -i 5a7615652878


# Run docker container with an OS command
docker container run <IMAGE_NAME> <COMMAND>
docker container run flask_app ls -la


# To run container in detached mode (background)
# "-d" flag is used for detach
docker run -d <IMAGE_NAME|IMAGE_ID>


# To give name to the container when starting it.
# "--name" flag is used to assign name to docker container.
# "-d" flag is used for detach
docker container run -d --name <SET_NAME_OF_CONTAINER> <IMAGE_NAME|IMAGE_ID>
- docker container run -d --name react_app_container react_app


# To publish port or map host port to docker container port.
# "-p" flag is used to publish port
# "--name" flag is used to assign name to docker container
# "-d" flag is used for detach
docker container run -d -p <HOST_PORT>:<DOCKER_PORT> --name <SET_NAME_OF_CONTAINER> <IMAGE_NAME|IMAGE_ID>
- docker container run -d -p 80:3000 --name react_app_container react_app
# DOCKER_PORT should be same as the port used in Dockerfile after EXPOSE instruction.
# After executing above command, we can containerd app on port 80 from the host machine.


# Execute commands in a running container
docker exec <CONTAINER_ID|CONTAINER_NAME> <COMMAND>
- docekr exec 9a4d94406bb3 ls -la


# Run another interactive bash/shell session inside a container (same as above).
docker exec -it <CONTAINER_ID> <<bash|sh>>


# Run another interactive shell session inside a container as root user
docker exec it -u root <CONTAINER_ID> sh


# To create docker image.
# "-t" flag is used as tag to name the image, ":" is used add a tag to image
docker build -t <IMAGE_NAME>:<TAG_NAME|Optional> <PATH_TO_DOCKERFILE_OF_PROJECT>
docker build --tag <IMAGE_NAME>:<TAG_NAME|Optional> <PATH_TO_DOCKERFILE_OF_PROJECT>
- docker build -t react_app .
- docker build -t react_app:v1.0 .
- docker build --tag react_app .


# To view layers of an image (history of image).
docker history <IMAGE_NAME>
docker image history <IMAGE_NAME>


# To remove all stopped containers.
docker container prune


# To remove all dangling images (loose images) which have no names and tags. These are the layers which are not tagged with any image. So when rebuilding the image, docker at some point lost relation to these layers with the image. Need to run `docker container prune` before running this command.
docker image prune


# To stop a container
docker container stop <CONTAINER_ID>


# To remove a specific container
docker container rm <CONTAINER_ID>


# To remove a specific container forcefully (even if the container is running).
# "-f" flag is used as force remove
docker container rm -f <CONTAINER_ID>


# To remove an image
docker image rm <IMAGE_NAME|IMAGE_ID>
docker image rmi <IMAGE_ID>
- docker image rm flask_app
- docker image rm 991337c2866e


# To remove multiple images
docker image rm <IMAGE_NAME|IMAGE_ID> <IMAGE_NAME|IMAGE_ID> <IMAGE_NAME|IMAGE_ID>


# To add a tag to image after the image is created.
docker image tag <IMAGE_ID> <TAG_NAME>
docker image tag <IMAGE_NAME>:<IMAGE_TAG> <TAG_NAME>
- docker image tag flask_app:latest flask_app:1.0.1


# To share the image on DockerHub, we need to add a new tag to image as the name of repository
docker image tag <IMAGE_ID> <DOCKER_USERNAME>/<DOCKER_REPO_NAME>:<TAG_NAME|optional>
docker image tag 991337c2866e n4u77i/react_app:v1.0
It's always a good practice to add a tag to image explicitly


# To login to Docker in dockercli
docker login


# To push image to DockerHub
docker push <IMAGE_ID>
docker image push <IMAGE_ID>
docker image push <DOCKER_NEW_TAG>
- docker image push n4u77i/react_app:v1.0


# To save image in a compressed file for transferring without pushing to DockerHub.
# "-o" flag is used as output to specify the output filename.
docker image save -o <TARGET_FILENAME> <IMAGE_NAME>:<IMAGE_TAG|optional>
docker image save -o <TARGET_FILENAME> <IMAGE_ID>
- docker image save -o django_app.zip django_app:2


# To load image from a zipped file
# "-i" flag is used as input file to load
docker image load -i <TARGET_FILENAME>
- docker image load -i django_app.zip


# To view logs of a container which are running or were started.
# "-f" flag is used as follow which means to display logs in realtime
docker logs -f <CONTAINER_ID>
docker container logs -f <CONTAINER_ID>


# To persist data of containers we use volumes, to create volume
docker volume create <VOLUME_NAME>


# To view all volumes
docker volume ls


# To inspect or view details of docker volume
docker volume inspect <VOLUME_NAME>


# To remove a specific volume
docker volume rm <VOLUME_NAME>


# To remove all unused volumes
docker volume prune


# To assign volume to a container when running it.
# "-v" flag is used as volume to assign it to docker container
# "-p" flag is used to publish port
# "-d" flag is used for detach
docker container run -d -p <HOST_PORT>:<DOCKER_PORT> -v <VOLUME_NAME>:<PATH_OF_VOLUME> <IMAGE_NAME|IMAGE_ID>
- docker container run -d -p 8000:3000 -v react_app_data:/app/data react_app
# PATH_OF_VOLUME can be can path, it can also be the path of the volume which you created with `docker volume create` command
# To view path of volume created, run `docker volume inspect` command
# If PATH_OF_VOLUME doesnot exist, docker will automatically create it for us


# Copy files or directories from docker container to host machine.
docker cp <CONTAINER_ID>:<PATH_OF_FILE_TO_COPY> <DESTINATION_PATH_ON_HOST>
docker cp 0a1adc714dbf:/app/data/file.txt .
# The "." period refers to the current directory in the host


# Copy files or directories from host machine to docker container.
docker cp <PATH_OF_FILE_TO_COPY> <CONTAINER_ID>:<DESTINATION_PATH_ON_CONTAINER>
docker cp ./logs.txt 0a1adc714dbf:/app/data/
# The "." period refers to the current directory in the host


# To share source with docker container so that you don't need to rebuild image everytime when code changes.
# "-p" flag is used to publish port
# "--name" flag is used to assign name to docker container
# "-d" flag is used for detach
# "-v" flag is used as volume to map project directory on host to docker container
docker container run -d -p 8000:3000 -v <PATH_OF_PROJECT_DIRECTORY>:<PATH_ON_CONTAINER> --name <SET_NAME_OF_CONTAINER> <IMAGE_NAME>
# Linux
- docker container run -d -p 8000:3000 -v $(pwd):/app --name react_app_container react_app:1.0
- docker container run -d -p 8000:3000 -v $"(pwd)":/app --name react_app_container react_app:1.0	# If path contains spaces
# Powershell
- docker container run -d -p 8000:3000 -v ${pwd}:/app --name react_app_container react_app:1.0
- docker container run -d -p 8000:3000 -v "${pwd}:/app" --name react_app_container react_app:1.0	# If path contains spaces
# CMD
- docker container run -d -p 8000:3000 -v %cd%:/app --name react_app_container react_app:1.0
- docker container run -d -p 8000:3000 -v "%cd%":/app --name react_app_container react_app:1.0		# If path contains spaces
# It is preferred to rebuild image when code changes for production enviroment, but in case of development enviroment it is fine.


# To view only IDs of all containers.
# "-a" flag is used as all to view all containers either running or stopped
# "-q" flag is used as quiet which displays only ids
docker container ps -a -q
docker container ps -aq


# To view only IDs of all images.
# "-q" flag is used as quiet which displays only ids
docker images -q


# To delete all containers either running or stopped in one command (Linux only).
docker container rm -f $(docker container ps -aq)


# To delete all images in one command (Linux only).
docker image rm $(docker images -q)
docker image rmi $(docker images -q)
docker image rm $(docker image ls -aq)
docker image rmi $(docker image ls -aq)


# To remove all containers stopped or running, all images used or dangling and all volumes used or unused.
docker system prune -af


# To view all networks in a docker
docker network ls
# When we run docker-compose, docker will automatically create a network for the application so that containers can talk to each other.


########### DOCKER-COMPOSE ###########
# To build image from docker-compose file.
docker-compose build
# You need to be in the project directory where docker-compose file is placed


# To build image from docker-compose file without caching.
# "--no-cache" is used as flag to not use cache
docker-compose build --no-cache


# To start an application with multiple containers.
docker-compose up


# To start an application with multiple containers if the images are not created.
# "--build" flag is used to build images before starting containers
docker-compose up --build


# To start an application with multiple containers in background.
# "-d" flag is used as detached mode which means in background
docker-compose up -d


# To view all running containers of an application.
docker-compose ps


# To stop and remove all containers of an application.
docker-compose down
# It will not remove images


# To view logs of all containers of an application.
docker-compose logs


# To view logs of all containers of an application in realtime.
# "-f" flag is used as follow which means to display logs in realtime
docker-compose logs -f